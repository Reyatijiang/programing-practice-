import random
import math
import copy




# Node class that represents a node
class Node:
    # Constructer
    def __init__(self, pyraminx=[], parent=()):
        self.parent = parent
        self.pyraminx = pyraminx
        self.g = 0  # Distance to start node
        self.h = 0  # Distance to goal node
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.pyraminx == other.pyraminx

        # Sort nodes

    def __lt__(self, other):
        return self.f < other.f


# All the moves

def U(pyraminx):
    pyraminx[0][5], pyraminx[0][12], pyraminx[0][19] = pyraminx[0][12], pyraminx[0][19], pyraminx[0][5]
    return pyraminx

# Move the Top corner piece clockwise on front face
def U_(pyraminx):
    pyraminx[0][5], pyraminx[0][12], pyraminx[0][19] = pyraminx[0][19], pyraminx[0][5], pyraminx[0][12]
    return pyraminx


# Move the Top 2 rows counterclockwise on front face
def U1(pyraminx):
    pyraminx[1][4], pyraminx[1][5], pyraminx[1][6], pyraminx[1][11], pyraminx[1][12], pyraminx[1][13], pyraminx[1][18], \
    pyraminx[1][19], pyraminx[1][20] = \
        pyraminx[1][11], pyraminx[1][12], pyraminx[1][13], pyraminx[1][18], pyraminx[1][19], pyraminx[1][20], \
        pyraminx[1][4], pyraminx[1][5], pyraminx[1][6]
    return pyraminx


# Move the Top 2 rows clockwise on front face
def U1_(pyraminx):
    pyraminx[1][4], pyraminx[1][5], pyraminx[1][6], pyraminx[1][11], pyraminx[1][12], pyraminx[1][13], pyraminx[1][18], \
    pyraminx[1][19], pyraminx[1][20] = \
        pyraminx[1][18], pyraminx[1][19], pyraminx[1][20], pyraminx[1][4], pyraminx[1][5], pyraminx[1][6], pyraminx[1][
            11], pyraminx[1][12], pyraminx[1][13]
    return pyraminx


# Move the Top 3rd row pieces counterclockwise on front face
def U2(pyraminx):
    pyraminx[2][3], pyraminx[2][4], pyraminx[2][5], pyraminx[2][6], pyraminx[2][7], pyraminx[2][10], pyraminx[2][11], \
    pyraminx[2][12], pyraminx[2][13], pyraminx[2][14], pyraminx[2][17], pyraminx[2][18], pyraminx[2][19], pyraminx[2][
        20], pyraminx[2][21] = \
        pyraminx[2][10], pyraminx[2][11], pyraminx[2][12], pyraminx[2][13], pyraminx[2][14], pyraminx[2][17], \
        pyraminx[2][18], pyraminx[2][19], pyraminx[2][20], pyraminx[2][21], pyraminx[2][3], pyraminx[2][4], pyraminx[2][
            5], pyraminx[2][6], pyraminx[2][7]
    return pyraminx

# Move the Top 3rd row pieces clockwise on front face
def U2_(pyraminx):
    pyraminx[2][3], pyraminx[2][4], pyraminx[2][5], pyraminx[2][6], pyraminx[2][7], pyraminx[2][10], pyraminx[2][11], \
    pyraminx[2][12], pyraminx[2][13], pyraminx[2][14], pyraminx[2][17], pyraminx[2][18], pyraminx[2][19], pyraminx[2][
        20], pyraminx[2][21] = \
        pyraminx[2][17], pyraminx[2][18], pyraminx[2][19], pyraminx[2][20], pyraminx[2][21], pyraminx[2][3], \
        pyraminx[2][4], pyraminx[2][5], pyraminx[2][6], pyraminx[2][7], pyraminx[2][10], pyraminx[2][11], pyraminx[2][
            12], pyraminx[2][13], pyraminx[2][14]
    return pyraminx


# Move the Left corner piece counterclockwise on front face
def L(pyraminx):
    pyraminx[3][2], pyraminx[3][15], pyraminx[3][23] = pyraminx[3][15], pyraminx[3][23], pyraminx[3][2]
    return pyraminx

# Move the Left corner piece clockwise on front face
def L_(pyraminx):
    pyraminx[3][2], pyraminx[3][15], pyraminx[3][23] = pyraminx[3][23], pyraminx[3][2], pyraminx[3][15]
    return pyraminx


# Move the Left 2 rows counterclockwise on front face
def L1(pyraminx):
    pyraminx[3][3], pyraminx[2][3], pyraminx[3][4], pyraminx[3][13], pyraminx[2][14], pyraminx[3][14], pyraminx[3][24], \
    pyraminx[3][25], pyraminx[2][24] = \
        pyraminx[3][14], pyraminx[3][13], pyraminx[2][14], pyraminx[3][25], pyraminx[3][24], pyraminx[2][24], \
        pyraminx[3][3], pyraminx[2][3], pyraminx[3][4]
    return pyraminx

# Move the Left 2 rows clockwise on front face
def L1_(pyraminx):
    pyraminx[3][3], pyraminx[2][3], pyraminx[3][4], pyraminx[3][13], pyraminx[2][14], pyraminx[3][14], pyraminx[3][24], \
    pyraminx[3][25], pyraminx[2][24] = \
        pyraminx[3][24], pyraminx[3][25], pyraminx[2][24], pyraminx[2][3], pyraminx[3][4], pyraminx[3][3], pyraminx[3][
            14], pyraminx[2][14], pyraminx[3][13]
    return pyraminx


# Move the Left 3rd row counterclockwise on front face
def L2(pyraminx):
    pyraminx[3][5], pyraminx[3][6], pyraminx[2][4], pyraminx[2][5], pyraminx[1][4], pyraminx[3][11], pyraminx[3][12], \
    pyraminx[2][12], pyraminx[2][13], pyraminx[1][13], pyraminx[1][25], pyraminx[3][26], pyraminx[3][27], pyraminx[2][
        26], pyraminx[2][25], = \
        pyraminx[2][13], pyraminx[1][13], pyraminx[3][12], pyraminx[2][12], pyraminx[3][11], pyraminx[3][26], \
        pyraminx[3][27], pyraminx[2][26], pyraminx[2][25], pyraminx[1][27], pyraminx[3][6], pyraminx[1][4], pyraminx[2][
            4], pyraminx[2][5], pyraminx[3][5],
    return pyraminx


# Move the Left 3rd row clockwise on front face
def L2_(pyraminx):
    pyraminx[3][5], pyraminx[3][6], pyraminx[2][4], pyraminx[2][5], pyraminx[1][4], pyraminx[3][11], pyraminx[3][12], \
    pyraminx[2][12], pyraminx[2][13], pyraminx[1][13], pyraminx[1][25], pyraminx[3][26], pyraminx[3][27], pyraminx[2][
        26], pyraminx[2][25], = \
        pyraminx[3][26], pyraminx[3][27], pyraminx[2][25], pyraminx[2][26], pyraminx[1][27], pyraminx[2][6], \
        pyraminx[1][4], pyraminx[2][5], pyraminx[3][5], pyraminx[3][6], pyraminx[1][13], pyraminx[3][11], pyraminx[3][
            12], pyraminx[3][12], pyraminx[3][11],
    return pyraminx


# Move the Right corner piece counterclockwise on front face
def R(pyraminx):
    pyraminx[3][8], pyraminx[3][16], pyraminx[3][29] = pyraminx[3][16], pyraminx[3][29], pyraminx[3][8]
    return pyraminx

# Move the Top corner piece clockwise on front face
def R_(pyraminx):
    pyraminx[3][8], pyraminx[3][16], pyraminx[3][29] = pyraminx[3][29], pyraminx[3][8], pyraminx[3][16]
    return pyraminx


# Move the right 2 rows counterclockwise on front face
def R1(pyraminx):
    pyraminx[3][6], pyraminx[3][7], pyraminx[2][7], pyraminx[3][17], pyraminx[3][18], pyraminx[2][17], pyraminx[3][27], \
    pyraminx[3][28], pyraminx[2][28] = \
        pyraminx[2][17], pyraminx[3][17], pyraminx[3][18], pyraminx[3][25], pyraminx[3][24], pyraminx[2][24], \
        pyraminx[2][7], pyraminx[3][7], pyraminx[3][6]


# Move the Left 2 rows clockwise on front face
def R1_(pyraminx):
    pyraminx[3][6], pyraminx[3][7], pyraminx[2][7], pyraminx[3][17], pyraminx[3][18], pyraminx[2][17], pyraminx[3][27], \
    pyraminx[3][28], pyraminx[2][28] = \
        pyraminx[2][28], pyraminx[3][27], pyraminx[3][28], pyraminx[3][7], pyraminx[2][7], pyraminx[3][6], pyraminx[3][
            18], pyraminx[3][17], pyraminx[2][17]
    return pyraminx


# Move the Right 3rd row counterclockwise on front face
def R2(pyraminx):
    pyraminx[3][4], pyraminx[3][5], pyraminx[2][5], pyraminx[2][6], pyraminx[1][6], pyraminx[3][19], pyraminx[3][20], \
    pyraminx[2][18], pyraminx[2][19], pyraminx[1][18], pyraminx[3][25], pyraminx[3][26], pyraminx[2][26], pyraminx[2][
        27], pyraminx[1][27], = \
        pyraminx[1][18], pyraminx[2][18], pyraminx[2][19], pyraminx[3][18], pyraminx[3][19], pyraminx[3][26], \
        pyraminx[3][25], pyraminx[2][27], pyraminx[2][26], pyraminx[3][27], pyraminx[1][6], pyraminx[2][6], pyraminx[2][
            5], pyraminx[3][5], pyraminx[3][4],
    return pyraminx

# Move the Right 3rd row clockwise on front face
def R2_(pyraminx):
    pyraminx[3][4], pyraminx[3][5], pyraminx[2][5], pyraminx[2][6], pyraminx[1][6], pyraminx[3][19], pyraminx[3][20], \
    pyraminx[2][18], pyraminx[2][19], pyraminx[1][18], pyraminx[3][25], pyraminx[3][26], pyraminx[2][26], pyraminx[2][
        27], pyraminx[1][27] = \
        pyraminx[1][27], pyraminx[2][27], pyraminx[2][26], pyraminx[3][26], pyraminx[3][25], pyraminx[2][6], \
        pyraminx[1][6], pyraminx[3][5], pyraminx[2][5], pyraminx[3][4], pyraminx[3][20], pyraminx[3][19], pyraminx[2][
            19], pyraminx[2][18], pyraminx[1][18]
    return pyraminx


# Move the Back corner piece counterclockwise on front face
def B(pyraminx):
    pyraminx[3][22], pyraminx[3][9], pyraminx[0][26] = pyraminx[3][9], pyraminx[0][26], pyraminx[3][22]
    return pyraminx

# Move the Back corner piece clockwise on front face
def B_(pyraminx):
    pyraminx[3][22], pyraminx[3][9], pyraminx[0][26] = pyraminx[0][26], pyraminx[3][22], pyraminx[3][9]
    return pyraminx


# Move the Back 2 rows counterclockwise on front face
def B1(pyraminx):
    pyraminx[3][20], pyraminx[3][21], pyraminx[2][21], pyraminx[3][10], pyraminx[3][11], pyraminx[2][10], pyraminx[1][
        25], pyraminx[1][26], pyraminx[1][27] = \
        pyraminx[2][11], pyraminx[3][10], pyraminx[3][11], pyraminx[1][26], pyraminx[1][27], pyraminx[1][25], \
        pyraminx[2][21], pyraminx[3][21], pyraminx[3][20]
    return pyraminx

# Move the Back 2 rows clockwise on front face
def B1_(pyraminx):
    pyraminx[3][20], pyraminx[3][21], pyraminx[2][21], pyraminx[3][10], pyraminx[3][11], pyraminx[2][10], pyraminx[1][
        25], pyraminx[1][26], pyraminx[1][27] = \
        pyraminx[1][27], pyraminx[1][26], pyraminx[1][25], pyraminx[3][21], pyraminx[2][21], pyraminx[3][20], \
        pyraminx[3][11], pyraminx[3][10], pyraminx[2][10]
    return pyraminx


# Move the Back 3rd row  counterclockwise on front face
def B2(pyraminx):
    pyraminx[3][18], pyraminx[3][19], pyraminx[2][19], pyraminx[2][20], pyraminx[1][20], pyraminx[3][12], pyraminx[3][
        13], pyraminx[2][11], pyraminx[2][12], pyraminx[1][11], pyraminx[2][24], pyraminx[2][25], pyraminx[2][26], \
    pyraminx[2][27], pyraminx[2][28], = \
        pyraminx[1][11], pyraminx[2][11], pyraminx[2][12], pyraminx[3][13], pyraminx[3][12], pyraminx[2][25], \
        pyraminx[2][24], pyraminx[2][26], pyraminx[2][27], pyraminx[2][28], pyraminx[1][20], pyraminx[2][20], \
        pyraminx[2][19], pyraminx[3][19], pyraminx[3][18],
    return pyraminx
# Move the Back 3rd row  clockwise on front face
def B2_(pyraminx):
    pyraminx[3][18], pyraminx[3][19], pyraminx[2][19], pyraminx[2][20], pyraminx[1][20], pyraminx[3][12], pyraminx[3][
        13], pyraminx[2][11], pyraminx[2][12], pyraminx[1][11], pyraminx[2][24], pyraminx[2][25], pyraminx[2][26], \
    pyraminx[2][27], pyraminx[2][28], = \
        pyraminx[2][28], pyraminx[2][27], pyraminx[2][26], pyraminx[2][25], pyraminx[2][24], pyraminx[1][20], \
        pyraminx[2][19], pyraminx[2][20], pyraminx[2][19], pyraminx[3][19], pyraminx[3][13], pyraminx[3][12], \
        pyraminx[2][12], pyraminx[2][11], pyraminx[1][11],
    return pyraminx

# Count the # of corner piece out of place
def Count_corner(pyraminx):
    corner_num = 0;
    if (pyraminx[0][5] != "R"):
        corner_num = corner_num + 1
    if (pyraminx[0][12] != "B"):
        corner_num = corner_num + 1
    if (pyraminx[0][19] != "G"):
        corner_num = corner_num + 1
    if (pyraminx[0][26] != "Y"):
        corner_num = corner_num + 1

    if (pyraminx[3][2] != "R"):
        corner_num = corner_num + 1
    if (pyraminx[3][9] != "B"):
        corner_num = corner_num + 1
    if (pyraminx[3][16] != "G"):
        corner_num = corner_num + 1
    if (pyraminx[3][23] != "Y"):
        corner_num = corner_num + 1

    if (pyraminx[3][8] != "R"):
        corner_num = corner_num + 1
    if (pyraminx[3][15] != "B"):
        corner_num = corner_num + 1
    if (pyraminx[3][22] != "G"):
        corner_num = corner_num + 1
    if (pyraminx[3][29] != "Y"):
        corner_num = corner_num + 1

    return corner_num

# Count the # of edge piece out of place
def Count_Edge(pyraminx):
    edge_num = 0
    if (pyraminx[1][4] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[1][5] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[1][6] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[2][3] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[2][4] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[2][6] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[2][7] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[3][3] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[3][4] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[3][5] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[3][6] != "R"):
        edge_num = edge_num + 1
    if (pyraminx[3][7] != "R"):
        edge_num = edge_num + 1

    if (pyraminx[1][11] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[1][12] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[1][13] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[2][10] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[2][11] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[2][13] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[2][14] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[3][10] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[3][11] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[3][12] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[3][13] != "B"):
        edge_num = edge_num + 1
    if (pyraminx[3][14] != "B"):
        edge_num = edge_num + 1

    if (pyraminx[1][18] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[1][19] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[1][20] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[2][17] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[2][18] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[2][20] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[2][21] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[3][17] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[3][18] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[3][19] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[3][20] != "G"):
        edge_num = edge_num + 1
    if (pyraminx[3][21] != "G"):
        edge_num = edge_num + 1

    if (pyraminx[1][25] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[1][26] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[1][27] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[2][24] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[2][25] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[2][27] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[2][28] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[3][24] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[3][25] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[3][26] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[3][27] != "Y"):
        edge_num = edge_num + 1
    if (pyraminx[3][28] != "Y"):
        edge_num = edge_num + 1
    return edge_num

# Count the # of inner piece  out of place
def Count_Inner(pyraminx):
    inner_num = 0
    if (pyraminx[2][5] != "R"):
        inner_num = inner_num + 1
    if (pyraminx[2][12] != "B"):
        inner_num = inner_num + 1
    if (pyraminx[2][19] != "G"):
        inner_num = inner_num + 1
    if (pyraminx[2][26] != "Y"):
        inner_num = inner_num + 1
    return inner_num

# Heursitc calculation, description in Readme
def Heuristic(pyraminx):
    ans = 0
    lst = []
    max_num_Inner = 3
    max_num_Edge = 15
    max_num_Corner = 3

    a = Count_Inner(pyraminx) / max_num_Inner
    lst.append(math.ceil(a))
    b = Count_Edge(pyraminx) / max_num_Edge
    lst.append(math.ceil(b))

    c = Count_corner(pyraminx) / max_num_Corner
    lst.append(math.ceil(c))
    ans = max(lst)

    return ans

# A* method
def astar_search(start, end):
    # Create lists for open nodes and closed nodes

    open = []
    closed = []

    start_node = Node(start, None)
    # start_node.h = Heuristic(start)
    # start_node.g = 0
    # start_node.f = start_node.h+start_node.g
    goal_node = Node(end, None)

    # Add the start node
    open.append(start_node)

    while len(open) > 0:
        open.sort()
        print(len(open))


        # Get the node with the lowest cost
        current_node = open.pop(0)
        # Add the current node to the closed list
        closed.append(current_node)
        if current_node == goal_node:
            path = []
            while current_node != start_node:
                path.append(current_node.pyraminx)
                current_node = current_node.parent

                # Return reversed path
            print(len(open))
            return path

        face = current_node.pyraminx
        # Expand child nodes

        neighbors = [U_(copy.deepcopy(face)),  U1_(copy.deepcopy(face)), U2_(copy.deepcopy(face)),
                     L_(copy.deepcopy(face)),L1_(copy.deepcopy(face)),R1_(copy.deepcopy(face)),R2_(copy.deepcopy(face)),
                     R_(copy.deepcopy(face)),B2_(copy.deepcopy(face)),B1_(copy.deepcopy(face)),
                     B_(copy.deepcopy(face))]


        # Loop through all the neigbors and check if they are in the closed list, if not calculate the A* score
        for next_node in neighbors:
            neighbor = Node(next_node, current_node)

            if (neighbor in closed):
                continue

            neighbor.h = Heuristic(neighbor.pyraminx)

            neighbor.g = neighbor.parent.g + 1

            neighbor.f = neighbor.g + neighbor.h


            # Check if neighbor is in open list and if it has a lower f value
            if (add_to_open(open, neighbor) == True):
                # Everything is green, add neighbor to open list
                open.append(neighbor)

    return None


def add_to_open(open, neighbor):
    for node in open:

        if (neighbor == node and neighbor.f > node.f):
            return False
    return True


# List that contains all the moves
# Moves_list = ["U","U1","U2","L","L1","R","R1","R2","B","B1","B2"]
Moves_list = ["U","U1","U2","L", "R", "B","L1","B2", ]
# Moves_list = ["U","U1","U2","L","L1","R","R1","R2","B","B1","B2"]


# Randomization
def Randomizor(n, start_P):
    All_moves = []
    for i in range(0, n):
        choice = random.choice(Moves_list)
        if (choice == "U"):
            U(start_P)
            All_moves.append("U")
        if (choice == "U1"):
            U1(start_P)
            All_moves.append("U1")
        if (choice == "U2"):
            U2(start_P)
            All_moves.append("U2")
        if (choice == "L"):
            L(start_P)
            All_moves.append("L")
        if (choice == "L1"):
            L1(start_P)
            All_moves.append("L1")
        if (choice == "L2"):
            L2(start_P)
            All_moves.append("L2")
        if (choice == "R"):
            R(start_P)
            All_moves.append("R")
        if (choice == "R1"):
            R1(start_P)
            All_moves.append("R1")
        if (choice == "R2"):
            R2(start_P)
            All_moves.append("R2")
        if (choice == "B"):
            B(start_P)
            All_moves.append("B")
        if (choice == "B1"):
            B1(start_P)
            All_moves.append("B1")
        if (choice == "B2"):
            B2(start_P)
            All_moves.append("B2")
    return start_P



def main():
    Start = [
        ["-", "-", "-", "-", "-", "R", "-", "-", "-", "-", "-", "-", "B", "-", "-", "-", "-", "-", "-", "G", "-", "-",
         "-", "-", "-", "-", "Y", "-", "-", "-"],
        ["-", "-", "-", "-", "R", "R", "R", "-", "-", "-", "-", "B", "B", "B", "-", "-", "-", "-", "G", "G", "G", "-",
         "-", "-", "-", "Y", "Y", "Y", "-", "-"],
        ["-", "-", "-", "R", "R", "R", "R", "R", "-", "-", "B", "B", "B", "B", "B", "-", "-", "G", "G", "G", "G", "G",
         "-", "-", "Y", "Y", "Y", "Y", "Y", "-"],
        ["-", "-", "R", "R", "R", "R", "R", "R", "R", "B", "B", "B", "B", "B", "B", "B", "G", "G", "G", "G", "G", "G",
         "G", "Y", "Y", "Y", "Y", "Y", "Y", "Y"]]


    end = [
        ["-", "-", "-", "-", "-", "R", "-", "-", "-", "-", "-", "-", "B", "-", "-", "-", "-", "-", "-", "G", "-", "-",
         "-", "-", "-", "-", "Y", "-", "-", "-"],
        ["-", "-", "-", "-", "R", "R", "R", "-", "-", "-", "-", "B", "B", "B", "-", "-", "-", "-", "G", "G", "G", "-",
         "-", "-", "-", "Y", "Y", "Y", "-", "-"],
        ["-", "-", "-", "R", "R", "R", "R", "R", "-", "-", "B", "B", "B", "B", "B", "-", "-", "G", "G", "G", "G", "G",
         "-", "-", "Y", "Y", "Y", "Y", "Y", "-"],
        ["-", "-", "R", "R", "R", "R", "R", "R", "R", "B", "B", "B", "B", "B", "B", "B", "G", "G", "G", "G", "G", "G",
         "G", "Y", "Y", "Y", "Y", "Y", "Y", "Y"]]

    randommized_p = Randomizor(4, Start)
    path = astar_search(randommized_p, end)





if __name__ == "__main__": main()


